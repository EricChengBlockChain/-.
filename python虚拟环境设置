使用虚拟环境的详细步骤和命令如下：

安装虚拟环境工具。可以使用 pip 包管理器来安装：pip install virtualenv

在合适的位置创建一个新的虚拟环境。例如，在项目文件夹中创建一个名为“venv”的虚拟环境：virtualenv venv

激活虚拟环境。在 Windows 操作系统中，您可以在命令行中输入venv\Scripts\activate来激活虚拟环境。
在类 Unix 操作系统（例如 Linux 和 macOS）中，您可以输入source venv/bin/activate来激活虚拟环境。
您可以在命令行提示符中看到虚拟环境的名称（例如“(venv)”）。

在虚拟环境中安装所需的 Python 包。使用 pip 包管理器安装所需的包，例如：pip install numpy。安装的包将被存储在虚拟环境中，不会影响全局 Python 环境。

当您完成项目时，可以在命令行中输入deactivate来退出虚拟环境。

如果您需要使用多个虚拟环境，则需要注意以下事项：

为每个项目创建独立的虚拟环境，并在其中安装必要的包。

在使用虚拟环境之前，必须先激活虚拟环境。

确保在使用虚拟环境时，您使用的是虚拟环境中安装的 Python 版本和包。

在切换虚拟环境时，一定要先退出当前虚拟环境，然后再激活新的虚拟环境。

虚拟环境可以使用pip freeze命令来查看当前虚拟环境中已安装的所有包和版本。

可以使用pip list命令来查看全局 Python 环境中安装的所有包和版本。这可以帮助您确保在使用虚拟环境时不会意外地使用全局环境中的包。

使用虚拟环境是 Python 中管理依赖项的常用方式之一，可以帮助您在不同项目中隔离不同的依赖库，避免不同项目之间的冲突。
###############

查看python版本以及位置
python -m site --user-site
python3 -m site --user-site
查看pip安装的库有哪些
pip list --format=columns
pip3 list --format=columns
